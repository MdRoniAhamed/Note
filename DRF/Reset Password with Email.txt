													RESET Password  With Email:
													===========================

Documentation link: https://pypi.org/project/django-rest-passwordreset/ 

pip install: pip install django-rest-passwordreset


						
signals.py =
==============


# accounts/signals.py

from django.core.mail import EmailMultiAlternatives
from django.dispatch import receiver
from django.template.loader import render_to_string
from django.urls import reverse

from django_rest_passwordreset.signals import reset_password_token_created


@receiver(reset_password_token_created)
def password_reset_token_created(sender, instance, reset_password_token, *args, **kwargs):
    """
    Handles password reset tokens
    When a token is created, an e-mail needs to be sent to the user
    :param sender: View Class that sent the signal
    :param instance: View Instance that sent the signal
    :param reset_password_token: Token Model Object
    :param args:
    :param kwargs:
    :return:
    """
    # send an e-mail to the user
    reset_password_url = "{}?token={}".format(
            instance.request.build_absolute_uri(reverse('password_reset:reset-password-confirm')),
            reset_password_token.key)
    tok = reset_password_token.key
    context = {
        'current_user': reset_password_token.user,
        'username': reset_password_token.user.username,
        'email': reset_password_token.user.email,
        'reset_password_url': reset_password_url,
        'token':tok
    }

    # render email text
    email_html_message = render_to_string('password_reset_email.html', context)
    email_plaintext_message = render_to_string('password_reset_email.txt', context)

    msg = EmailMultiAlternatives(
        # title:
        "Password Reset for {title}".format(title="Your Website Title"),
        # message:
        reset_password_url,
        # from:
        "noreply@yourdomain.com",
        # to:
        [reset_password_token.user.email]
    )
    msg.attach_alternative(email_html_message, "text/html")
    msg.send()
	
	
reset_password.html:
====================

<!-- mydrfproject/templates/email/password_reset_email.html -->

<!DOCTYPE html>
<html>
<head>
    <title>Password Reset Email</title>
</head>
<body>
    <p>Hello,</p>
    <p>We've received a request to reset your password. Please click on the link below to reset your password:</p>
    <p>{{username}}</p>
    <p>Token: <h1>{{token}}</h1></p>
    <p><a href="{{ reset_password_url }}">Reset Password</a></p>
    <p>If you did not request this password reset, you can safely ignore this email.</p>
    <p>Best regards,</p>
    <p>Your Application Team</p>
</body>
</html>


reset_password.txt:
===================

Hello {{username}}, We've received a request to reset your password. Please click on the link below to reset your password: {{ reset_password_url }}


models.py
============


from django.contrib.auth.models import AbstractUser
from django.db import models

class CustomUser(AbstractUser):
    email = models.EmailField(unique=True)

    # Add custom fields here, if needed

    def __str__(self):
        return self.username
		
		
		
setting.py
==============

# Email Backend Configuration
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'  # Replace with your preferred backend

EMAIL_PORT = 587  # Replace with your email port
EMAIL_USE_TLS = True  # Set to False if your email server doesn't use TLS
EMAIL_HOST = 'smtp.gmail.com'  # Replace with your email host for gmail -> 'smtp.gmail.com'
EMAIL_HOST_USER = 'your@gmail.com'  # Replace with your email username
EMAIL_HOST_PASSWORD = 'gmail_app_password'  # Replace with your email password

INSTALLED_APPS = (
    ...
    'django.contrib.auth',
    ...
    'rest_framework',
    ...
    'django_rest_passwordreset',
    ...
)


serializers.py:
================

# accounts/serializers.py

from rest_framework import serializers

class ChangePasswordSerializer(serializers.Serializer):
    old_password = serializers.CharField(required=True)
    new_password = serializers.CharField(required=True)

class ResetPasswordEmailSerializer(serializers.Serializer):
    email = serializers.EmailField(required=True)